// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EVO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EVO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textChange {
    
    namespace {
        
        const ::google::protobuf::Descriptor* textChangeMessage_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
        textChangeMessage_reflection_ = NULL;
        
    }  // namespace
    
    
    void protobuf_AssignDesc_EVO_2eproto() {
        protobuf_AddDesc_EVO_2eproto();
        const ::google::protobuf::FileDescriptor* file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                                                                             "EVO.proto");
        GOOGLE_CHECK(file != NULL);
        textChangeMessage_descriptor_ = file->message_type(0);
        static const int textChangeMessage_offsets_[3] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(textChangeMessage, cursorlocation_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(textChangeMessage, contentmodified_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(textChangeMessage, numchars_),
        };
        textChangeMessage_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
                                                                     textChangeMessage_descriptor_,
                                                                     textChangeMessage::default_instance_,
                                                                     textChangeMessage_offsets_,
                                                                     GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(textChangeMessage, _has_bits_[0]),
                                                                     GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(textChangeMessage, _unknown_fields_),
                                                                     -1,
                                                                     ::google::protobuf::DescriptorPool::generated_pool(),
                                                                     ::google::protobuf::MessageFactory::generated_factory(),
                                                                     sizeof(textChangeMessage));
    }
    
    namespace {
        
        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
        inline void protobuf_AssignDescriptorsOnce() {
            ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                               &protobuf_AssignDesc_EVO_2eproto);
        }
        
        void protobuf_RegisterTypes(const ::std::string&) {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                                                                                 textChangeMessage_descriptor_, &textChangeMessage::default_instance());
        }
        
    }  // namespace
    
    void protobuf_ShutdownFile_EVO_2eproto() {
        delete textChangeMessage::default_instance_;
        delete textChangeMessage_reflection_;
    }
    
    void protobuf_AddDesc_EVO_2eproto() {
        static bool already_here = false;
        if (already_here) return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;
        
        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                                                                     "\n\tEVO.proto\022\ntextChange\"V\n\021textChangeMes"
                                                                     "sage\022\026\n\016cursorLocation\030\001 \001(\003\022\027\n\017contentM"
                                                                     "odified\030\002 \001(\t\022\020\n\010numChars\030\003 \001(\003", 111);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                                                                          "EVO.proto", &protobuf_RegisterTypes);
        textChangeMessage::default_instance_ = new textChangeMessage();
        textChangeMessage::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EVO_2eproto);
    }
    
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_EVO_2eproto {
        StaticDescriptorInitializer_EVO_2eproto() {
            protobuf_AddDesc_EVO_2eproto();
        }
    } static_descriptor_initializer_EVO_2eproto_;
    
    // ===================================================================
    
#ifndef _MSC_VER
    const int textChangeMessage::kCursorLocationFieldNumber;
    const int textChangeMessage::kContentModifiedFieldNumber;
    const int textChangeMessage::kNumCharsFieldNumber;
#endif  // !_MSC_VER
    
    textChangeMessage::textChangeMessage()
    : ::google::protobuf::Message() {
        SharedCtor();
    }
    
    void textChangeMessage::InitAsDefaultInstance() {
    }
    
    textChangeMessage::textChangeMessage(const textChangeMessage& from)
    : ::google::protobuf::Message() {
        SharedCtor();
        MergeFrom(from);
    }
    
    void textChangeMessage::SharedCtor() {
        _cached_size_ = 0;
        cursorlocation_ = GOOGLE_LONGLONG(0);
        contentmodified_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        numchars_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }
    
    textChangeMessage::~textChangeMessage() {
        SharedDtor();
    }
    
    void textChangeMessage::SharedDtor() {
        if (contentmodified_ != &::google::protobuf::internal::kEmptyString) {
            delete contentmodified_;
        }
        if (this != default_instance_) {
        }
    }
    
    void textChangeMessage::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* textChangeMessage::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return textChangeMessage_descriptor_;
    }
    
    const textChangeMessage& textChangeMessage::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_EVO_2eproto();
        return *default_instance_;
    }
    
    textChangeMessage* textChangeMessage::default_instance_ = NULL;
    
    textChangeMessage* textChangeMessage::New() const {
        return new textChangeMessage;
    }
    
    void textChangeMessage::Clear() {
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            cursorlocation_ = GOOGLE_LONGLONG(0);
            if (has_contentmodified()) {
                if (contentmodified_ != &::google::protobuf::internal::kEmptyString) {
                    contentmodified_->clear();
                }
            }
            numchars_ = GOOGLE_LONGLONG(0);
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }
    
    bool textChangeMessage::MergePartialFromCodedStream(
                                                        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
        ::google::protobuf::uint32 tag;
        while ((tag = input->ReadTag()) != 0) {
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int64 cursorLocation = 1;
                case 1: {
                    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                             ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                                                                                                  input, &cursorlocation_)));
                        set_has_cursorlocation();
                    } else {
                        goto handle_uninterpreted;
                    }
                    if (input->ExpectTag(18)) goto parse_contentModified;
                    break;
                }
                    
                    // optional string contentModified = 2;
                case 2: {
                    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                    parse_contentModified:
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                                                                     input, this->mutable_contentmodified()));
                        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                                                                   this->contentmodified().data(), this->contentmodified().length(),
                                                                                   ::google::protobuf::internal::WireFormat::PARSE);
                    } else {
                        goto handle_uninterpreted;
                    }
                    if (input->ExpectTag(24)) goto parse_numChars;
                    break;
                }
                    
                    // optional int64 numChars = 3;
                case 3: {
                    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
                    parse_numChars:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                             ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                                                                                                  input, &numchars_)));
                        set_has_numchars();
                    } else {
                        goto handle_uninterpreted;
                    }
                    if (input->ExpectAtEnd()) return true;
                    break;
                }
                    
                default: {
                handle_uninterpreted:
                    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        return true;
                    }
                    DO_(::google::protobuf::internal::WireFormat::SkipField(
                                                                            input, tag, mutable_unknown_fields()));
                    break;
                }
            }
        }
        return true;
#undef DO_
    }
    
    void textChangeMessage::SerializeWithCachedSizes(
                                                     ::google::protobuf::io::CodedOutputStream* output) const {
        // optional int64 cursorLocation = 1;
        if (has_cursorlocation()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cursorlocation(), output);
        }
        
        // optional string contentModified = 2;
        if (has_contentmodified()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                                                       this->contentmodified().data(), this->contentmodified().length(),
                                                                       ::google::protobuf::internal::WireFormat::SERIALIZE);
            ::google::protobuf::internal::WireFormatLite::WriteString(
                                                                      2, this->contentmodified(), output);
        }
        
        // optional int64 numChars = 3;
        if (has_numchars()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->numchars(), output);
        }
        
        if (!unknown_fields().empty()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                                                                             unknown_fields(), output);
        }
    }
    
    ::google::protobuf::uint8* textChangeMessage::SerializeWithCachedSizesToArray(
                                                                                  ::google::protobuf::uint8* target) const {
        // optional int64 cursorLocation = 1;
        if (has_cursorlocation()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cursorlocation(), target);
        }
        
        // optional string contentModified = 2;
        if (has_contentmodified()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                                                       this->contentmodified().data(), this->contentmodified().length(),
                                                                       ::google::protobuf::internal::WireFormat::SERIALIZE);
            target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                                                                             2, this->contentmodified(), target);
        }
        
        // optional int64 numChars = 3;
        if (has_numchars()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->numchars(), target);
        }
        
        if (!unknown_fields().empty()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                                                                                             unknown_fields(), target);
        }
        return target;
    }
    
    int textChangeMessage::ByteSize() const {
        int total_size = 0;
        
        if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            // optional int64 cursorLocation = 1;
            if (has_cursorlocation()) {
                total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int64Size(
                                                                        this->cursorlocation());
            }
            
            // optional string contentModified = 2;
            if (has_contentmodified()) {
                total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                                                                         this->contentmodified());
            }
            
            // optional int64 numChars = 3;
            if (has_numchars()) {
                total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int64Size(
                                                                        this->numchars());
            }
            
        }
        if (!unknown_fields().empty()) {
            total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                                                                               unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }
    
    void textChangeMessage::MergeFrom(const ::google::protobuf::Message& from) {
        GOOGLE_CHECK_NE(&from, this);
        const textChangeMessage* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const textChangeMessage*>(
                                                                                          &from);
        if (source == NULL) {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            MergeFrom(*source);
        }
    }
    
    void textChangeMessage::MergeFrom(const textChangeMessage& from) {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_cursorlocation()) {
                set_cursorlocation(from.cursorlocation());
            }
            if (from.has_contentmodified()) {
                set_contentmodified(from.contentmodified());
            }
            if (from.has_numchars()) {
                set_numchars(from.numchars());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }
    
    void textChangeMessage::CopyFrom(const ::google::protobuf::Message& from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }
    
    void textChangeMessage::CopyFrom(const textChangeMessage& from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }
    
    bool textChangeMessage::IsInitialized() const {
        
        return true;
    }
    
    void textChangeMessage::Swap(textChangeMessage* other) {
        if (other != this) {
            std::swap(cursorlocation_, other->cursorlocation_);
            std::swap(contentmodified_, other->contentmodified_);
            std::swap(numchars_, other->numchars_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }
    
    ::google::protobuf::Metadata textChangeMessage::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = textChangeMessage_descriptor_;
        metadata.reflection = textChangeMessage_reflection_;
        return metadata;
    }
    
    
    // @@protoc_insertion_point(namespace_scope)
    
}  // namespace textChange

// @@protoc_insertion_point(global_scope)
